digraph G{
	rankdir=LR;
	size="800,600";
	node [fontsize=10,fontcolor=red,style=filled,fillcolor=lightblue];
	"init_rootfs() <void __init init_rootfs (void) at ./init/do_mounts.c:635>:" -> "IS_ENABLED()";
	"init_rootfs() <void __init init_rootfs (void) at ./init/do_mounts.c:635>:" -> "strstr()";
	"load_ramdisk() <int __init load_ramdisk (char *str) at ./init/do_mounts.c:38>:" -> "pr_warn()";
	"prepare_namespace() <void __init prepare_namespace (void) at ./init/do_mounts.c:569>:" -> "printk()";
	"prepare_namespace() <void __init prepare_namespace (void) at ./init/do_mounts.c:569>:" -> "ssleep()";
	"prepare_namespace() <void __init prepare_namespace (void) at ./init/do_mounts.c:569>:" -> "wait_for_device_probe()";
	"prepare_namespace() <void __init prepare_namespace (void) at ./init/do_mounts.c:569>:" -> "md_run_setup()";
	"prepare_namespace() <void __init prepare_namespace (void) at ./init/do_mounts.c:569>:" -> "strncmp()";
	"prepare_namespace() <void __init prepare_namespace (void) at ./init/do_mounts.c:569>:" -> "mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "alloc_page()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "page_address()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "scnprintf()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "MAJOR()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "MINOR()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "get_fs_names() <void __init get_fs_names (char *page) at ./init/do_mounts.c:347>:";
	"get_fs_names() <void __init get_fs_names (char *page) at ./init/do_mounts.c:347>:" -> "strcpy()";
	"get_fs_names() <void __init get_fs_names (char *page) at ./init/do_mounts.c:347>:" -> "get_filesystem_list()";
	"get_fs_names() <void __init get_fs_names (char *page) at ./init/do_mounts.c:347>:" -> "strchr()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "strlen()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "alloc_page()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "page_address()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "strncpy()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "init_mount()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "init_chdir()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "printk()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "sb_rdonly()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "MAJOR()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "MINOR()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "put_page()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "printk()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "printk_all_partitions()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "panic()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "put_page()";
	"prepare_namespace() <void __init prepare_namespace (void) at ./init/do_mounts.c:569>:" -> "name_to_dev_t() <dev_t name_to_dev_t (const char *name) at ./init/do_mounts.c:284>:";
	"name_to_dev_t() <dev_t name_to_dev_t (const char *name) at ./init/do_mounts.c:284>:" -> "strcmp()";
	"name_to_dev_t() <dev_t name_to_dev_t (const char *name) at ./init/do_mounts.c:284>:" -> "strncmp()";
	"name_to_dev_t() <dev_t name_to_dev_t (const char *name) at ./init/do_mounts.c:284>:" -> "devt_from_partuuid() <dev_t devt_from_partuuid (const char *uuid_str) at ./init/do_mounts.c:101>:";
	"devt_from_partuuid() <dev_t devt_from_partuuid (const char *uuid_str) at ./init/do_mounts.c:101>:" -> "strchr()";
	"devt_from_partuuid() <dev_t devt_from_partuuid (const char *uuid_str) at ./init/do_mounts.c:101>:" -> "sscanf()";
	"devt_from_partuuid() <dev_t devt_from_partuuid (const char *uuid_str) at ./init/do_mounts.c:101>:" -> "strlen()";
	"devt_from_partuuid() <dev_t devt_from_partuuid (const char *uuid_str) at ./init/do_mounts.c:101>:" -> "class_find_device()";
	"devt_from_partuuid() <dev_t devt_from_partuuid (const char *uuid_str) at ./init/do_mounts.c:101>:" -> "match_dev_by_uuid() <int match_dev_by_uuid (struct device *dev, const void *data) at ./init/do_mounts.c:77>:";
	"match_dev_by_uuid() <int match_dev_by_uuid (struct device *dev, const void *data) at ./init/do_mounts.c:77>:" -> "dev_to_bdev()";
	"match_dev_by_uuid() <int match_dev_by_uuid (struct device *dev, const void *data) at ./init/do_mounts.c:77>:" -> "strncasecmp()";
	"devt_from_partuuid() <dev_t devt_from_partuuid (const char *uuid_str) at ./init/do_mounts.c:101>:" -> "bdget_disk()";
	"devt_from_partuuid() <dev_t devt_from_partuuid (const char *uuid_str) at ./init/do_mounts.c:101>:" -> "dev_to_disk()";
	"devt_from_partuuid() <dev_t devt_from_partuuid (const char *uuid_str) at ./init/do_mounts.c:101>:" -> "dev_to_bdev()";
	"devt_from_partuuid() <dev_t devt_from_partuuid (const char *uuid_str) at ./init/do_mounts.c:101>:" -> "bdput()";
	"devt_from_partuuid() <dev_t devt_from_partuuid (const char *uuid_str) at ./init/do_mounts.c:101>:" -> "put_device()";
	"devt_from_partuuid() <dev_t devt_from_partuuid (const char *uuid_str) at ./init/do_mounts.c:101>:" -> "pr_err()";
	"name_to_dev_t() <dev_t name_to_dev_t (const char *name) at ./init/do_mounts.c:284>:" -> "devt_from_partlabel() <dev_t devt_from_partlabel (const char *label) at ./init/do_mounts.c:177>:";
	"devt_from_partlabel() <dev_t devt_from_partlabel (const char *label) at ./init/do_mounts.c:177>:" -> "class_find_device()";
	"devt_from_partlabel() <dev_t devt_from_partlabel (const char *label) at ./init/do_mounts.c:177>:" -> "match_dev_by_label() <int match_dev_by_label (struct device *dev, const void *data) at ./init/do_mounts.c:167>:";
	"match_dev_by_label() <int match_dev_by_label (struct device *dev, const void *data) at ./init/do_mounts.c:167>:" -> "dev_to_bdev()";
	"match_dev_by_label() <int match_dev_by_label (struct device *dev, const void *data) at ./init/do_mounts.c:167>:" -> "strcmp()";
	"devt_from_partlabel() <dev_t devt_from_partlabel (const char *label) at ./init/do_mounts.c:177>:" -> "put_device()";
	"name_to_dev_t() <dev_t name_to_dev_t (const char *name) at ./init/do_mounts.c:284>:" -> "devt_from_devname() <dev_t devt_from_devname (const char *name) at ./init/do_mounts.c:191>:";
	"devt_from_devname() <dev_t devt_from_devname (const char *name) at ./init/do_mounts.c:191>:" -> "strlen()";
	"devt_from_devname() <dev_t devt_from_devname (const char *name) at ./init/do_mounts.c:191>:" -> "strcpy()";
	"devt_from_devname() <dev_t devt_from_devname (const char *name) at ./init/do_mounts.c:191>:" -> "blk_lookup_devt()";
	"devt_from_devname() <dev_t devt_from_devname (const char *name) at ./init/do_mounts.c:191>:" -> "isdigit()";
	"devt_from_devname() <dev_t devt_from_devname (const char *name) at ./init/do_mounts.c:191>:" -> "simple_strtoul()";
	"name_to_dev_t() <dev_t name_to_dev_t (const char *name) at ./init/do_mounts.c:284>:" -> "devt_from_devnum() <dev_t devt_from_devnum (const char *name) at ./init/do_mounts.c:234>:";
	"devt_from_devnum() <dev_t devt_from_devnum (const char *name) at ./init/do_mounts.c:234>:" -> "sscanf()";
	"devt_from_devnum() <dev_t devt_from_devnum (const char *name) at ./init/do_mounts.c:234>:" -> "MKDEV()";
	"devt_from_devnum() <dev_t devt_from_devnum (const char *name) at ./init/do_mounts.c:234>:" -> "MAJOR()";
	"devt_from_devnum() <dev_t devt_from_devnum (const char *name) at ./init/do_mounts.c:234>:" -> "MINOR()";
	"devt_from_devnum() <dev_t devt_from_devnum (const char *name) at ./init/do_mounts.c:234>:" -> "new_decode_dev()";
	"devt_from_devnum() <dev_t devt_from_devnum (const char *name) at ./init/do_mounts.c:234>:" -> "simple_strtoul()";
	"prepare_namespace() <void __init prepare_namespace (void) at ./init/do_mounts.c:569>:" -> "initrd_load()";
	"prepare_namespace() <void __init prepare_namespace (void) at ./init/do_mounts.c:569>:" -> "driver_probe_done()";
	"prepare_namespace() <void __init prepare_namespace (void) at ./init/do_mounts.c:569>:" -> "msleep()";
	"prepare_namespace() <void __init prepare_namespace (void) at ./init/do_mounts.c:569>:" -> "async_synchronize_full()";
	"prepare_namespace() <void __init prepare_namespace (void) at ./init/do_mounts.c:569>:" -> "mount_root() <void __init mount_root (void) at ./init/do_mounts.c:539>:";
	"mount_root() <void __init mount_root (void) at ./init/do_mounts.c:539>:" -> "mount_nfs_root() <int __init mount_nfs_root (void) at ./init/do_mounts.c:469>:";
	"mount_nfs_root() <int __init mount_nfs_root (void) at ./init/do_mounts.c:469>:" -> "nfs_root_data()";
	"mount_nfs_root() <int __init mount_nfs_root (void) at ./init/do_mounts.c:469>:" -> "do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "alloc_page()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "page_address()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "strncpy()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "init_mount()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "init_chdir()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "printk()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "sb_rdonly()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "MAJOR()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "MINOR()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "put_page()";
	"mount_nfs_root() <int __init mount_nfs_root (void) at ./init/do_mounts.c:469>:" -> "ssleep()";
	"mount_root() <void __init mount_root (void) at ./init/do_mounts.c:539>:" -> "printk()";
	"mount_root() <void __init mount_root (void) at ./init/do_mounts.c:539>:" -> "mount_cifs_root() <int __init mount_cifs_root (void) at ./init/do_mounts.c:511>:";
	"mount_cifs_root() <int __init mount_cifs_root (void) at ./init/do_mounts.c:511>:" -> "cifs_root_data()";
	"mount_cifs_root() <int __init mount_cifs_root (void) at ./init/do_mounts.c:511>:" -> "do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "alloc_page()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "page_address()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "strncpy()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "init_mount()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "init_chdir()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "printk()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "sb_rdonly()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "MAJOR()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "MINOR()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "put_page()";
	"mount_cifs_root() <int __init mount_cifs_root (void) at ./init/do_mounts.c:511>:" -> "ssleep()";
	"mount_root() <void __init mount_root (void) at ./init/do_mounts.c:539>:" -> "create_dev()";
	"mount_root() <void __init mount_root (void) at ./init/do_mounts.c:539>:" -> "pr_emerg()";
	"mount_root() <void __init mount_root (void) at ./init/do_mounts.c:539>:" -> "mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "alloc_page()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "page_address()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "scnprintf()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "MAJOR()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "MINOR()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "get_fs_names() <void __init get_fs_names (char *page) at ./init/do_mounts.c:347>:";
	"get_fs_names() <void __init get_fs_names (char *page) at ./init/do_mounts.c:347>:" -> "strcpy()";
	"get_fs_names() <void __init get_fs_names (char *page) at ./init/do_mounts.c:347>:" -> "get_filesystem_list()";
	"get_fs_names() <void __init get_fs_names (char *page) at ./init/do_mounts.c:347>:" -> "strchr()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "strlen()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "alloc_page()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "page_address()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "strncpy()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "init_mount()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "init_chdir()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "printk()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "sb_rdonly()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "MAJOR()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "MINOR()";
	"do_mount_root() <int __init do_mount_root (const char *name, const char *fs, const int flags, const void *data) at ./init/do_mounts.c:374>:" -> "put_page()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "printk()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "printk_all_partitions()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "panic()";
	"mount_block_root() <void __init mount_block_root (char *name, int flags) at ./init/do_mounts.c:411>:" -> "put_page()";
	"prepare_namespace() <void __init prepare_namespace (void) at ./init/do_mounts.c:569>:" -> "devtmpfs_mount()";
	"prepare_namespace() <void __init prepare_namespace (void) at ./init/do_mounts.c:569>:" -> "init_mount()";
	"prepare_namespace() <void __init prepare_namespace (void) at ./init/do_mounts.c:569>:" -> "init_chroot()";
	"root_delay_setup() <int __init root_delay_setup (char *str) at ./init/do_mounts.c:337>:" -> "simple_strtoul()";
	"root_dev_setup() <int __init root_dev_setup (char *line) at ./init/do_mounts.c:304>:" -> "strlcpy()";
	"rootfs_init_fs_context() <int rootfs_init_fs_context (struct fs_context *fc) at ./init/do_mounts.c:621>:" -> "IS_ENABLED()";
	"rootfs_init_fs_context() <int rootfs_init_fs_context (struct fs_context *fc) at ./init/do_mounts.c:621>:" -> "shmem_init_fs_context()";
	"rootfs_init_fs_context() <int rootfs_init_fs_context (struct fs_context *fc) at ./init/do_mounts.c:621>:" -> "ramfs_init_fs_context()";
	"early_initrd() <int __init early_initrd (char *p) at ./init/do_mounts_initrd.c:48>:" -> "early_initrdmem() <int __init early_initrdmem (char *p) at ./init/do_mounts_initrd.c:31>:";
	"early_initrdmem() <int __init early_initrdmem (char *p) at ./init/do_mounts_initrd.c:31>:" -> "memparse()";
	"initrd_load() <bool __init initrd_load (void) at ./init/do_mounts_initrd.c:124>:" -> "create_dev()";
	"initrd_load() <bool __init initrd_load (void) at ./init/do_mounts_initrd.c:124>:" -> "rd_load_image()";
	"initrd_load() <bool __init initrd_load (void) at ./init/do_mounts_initrd.c:124>:" -> "init_unlink()";
	"initrd_load() <bool __init initrd_load (void) at ./init/do_mounts_initrd.c:124>:" -> "handle_initrd() <void __init handle_initrd (void) at ./init/do_mounts_initrd.c:66>:";
	"handle_initrd() <void __init handle_initrd (void) at ./init/do_mounts_initrd.c:66>:" -> "pr_warn()";
	"handle_initrd() <void __init handle_initrd (void) at ./init/do_mounts_initrd.c:66>:" -> "new_encode_dev()";
	"handle_initrd() <void __init handle_initrd (void) at ./init/do_mounts_initrd.c:66>:" -> "create_dev()";
	"handle_initrd() <void __init handle_initrd (void) at ./init/do_mounts_initrd.c:66>:" -> "mount_block_root()";
	"handle_initrd() <void __init handle_initrd (void) at ./init/do_mounts_initrd.c:66>:" -> "init_mkdir()";
	"handle_initrd() <void __init handle_initrd (void) at ./init/do_mounts_initrd.c:66>:" -> "init_chdir()";
	"handle_initrd() <void __init handle_initrd (void) at ./init/do_mounts_initrd.c:66>:" -> "call_usermodehelper_setup()";
	"handle_initrd() <void __init handle_initrd (void) at ./init/do_mounts_initrd.c:66>:" -> "init_linuxrc() <int __init init_linuxrc (struct subprocess_info *info, struct cred *new) at ./init/do_mounts_initrd.c:54>:";
	"init_linuxrc() <int __init init_linuxrc (struct subprocess_info *info, struct cred *new) at ./init/do_mounts_initrd.c:54>:" -> "ksys_unshare()";
	"init_linuxrc() <int __init init_linuxrc (struct subprocess_info *info, struct cred *new) at ./init/do_mounts_initrd.c:54>:" -> "console_on_rootfs()";
	"init_linuxrc() <int __init init_linuxrc (struct subprocess_info *info, struct cred *new) at ./init/do_mounts_initrd.c:54>:" -> "init_chdir()";
	"init_linuxrc() <int __init init_linuxrc (struct subprocess_info *info, struct cred *new) at ./init/do_mounts_initrd.c:54>:" -> "init_mount()";
	"init_linuxrc() <int __init init_linuxrc (struct subprocess_info *info, struct cred *new) at ./init/do_mounts_initrd.c:54>:" -> "init_chroot()";
	"init_linuxrc() <int __init init_linuxrc (struct subprocess_info *info, struct cred *new) at ./init/do_mounts_initrd.c:54>:" -> "ksys_setsid()";
	"handle_initrd() <void __init handle_initrd (void) at ./init/do_mounts_initrd.c:66>:" -> "call_usermodehelper_exec()";
	"handle_initrd() <void __init handle_initrd (void) at ./init/do_mounts_initrd.c:66>:" -> "init_mount()";
	"handle_initrd() <void __init handle_initrd (void) at ./init/do_mounts_initrd.c:66>:" -> "init_chroot()";
	"handle_initrd() <void __init handle_initrd (void) at ./init/do_mounts_initrd.c:66>:" -> "new_decode_dev()";
	"handle_initrd() <void __init handle_initrd (void) at ./init/do_mounts_initrd.c:66>:" -> "mount_root()";
	"handle_initrd() <void __init handle_initrd (void) at ./init/do_mounts_initrd.c:66>:" -> "printk()";
	"handle_initrd() <void __init handle_initrd (void) at ./init/do_mounts_initrd.c:66>:" -> "init_umount()";
	"do_collect() <int __init do_collect (void) at ./init/initramfs.c:242>:" -> "memcpy()";
	"do_collect() <int __init do_collect (void) at ./init/initramfs.c:242>:" -> "eat() <inline void __init eat (unsigned n) at ./init/initramfs.c:209>:";
	"do_copy() <int __init do_copy (void) at ./init/initramfs.c:378>:" -> "xwrite() <ssize_t __init xwrite (struct file *file, const char *p, size_t count, loff_t *pos) at ./init/initramfs.c:18>:";
	"xwrite() <ssize_t __init xwrite (struct file *file, const char *p, size_t count, loff_t *pos) at ./init/initramfs.c:18>:" -> "kernel_write()";
	"do_copy() <int __init do_copy (void) at ./init/initramfs.c:378>:" -> "error() <void __init error (char *x) at ./init/initramfs.c:43>:";
	"do_copy() <int __init do_copy (void) at ./init/initramfs.c:378>:" -> "vfs_utimes()";
	"do_copy() <int __init do_copy (void) at ./init/initramfs.c:378>:" -> "fput()";
	"do_copy() <int __init do_copy (void) at ./init/initramfs.c:378>:" -> "eat() <inline void __init eat (unsigned n) at ./init/initramfs.c:209>:";
	"do_header() <int __init do_header (void) at ./init/initramfs.c:256>:" -> "memcmp()";
	"do_header() <int __init do_header (void) at ./init/initramfs.c:256>:" -> "error() <void __init error (char *x) at ./init/initramfs.c:43>:";
	"do_header() <int __init do_header (void) at ./init/initramfs.c:256>:" -> "parse_header() <void __init parse_header (char *s) at ./init/initramfs.c:168>:";
	"parse_header() <void __init parse_header (char *s) at ./init/initramfs.c:168>:" -> "memcpy()";
	"parse_header() <void __init parse_header (char *s) at ./init/initramfs.c:168>:" -> "simple_strtoul()";
	"parse_header() <void __init parse_header (char *s) at ./init/initramfs.c:168>:" -> "new_encode_dev()";
	"parse_header() <void __init parse_header (char *s) at ./init/initramfs.c:168>:" -> "MKDEV()";
	"do_header() <int __init do_header (void) at ./init/initramfs.c:256>:" -> "N_ALIGN()";
	"do_header() <int __init do_header (void) at ./init/initramfs.c:256>:" -> "S_ISLNK()";
	"do_header() <int __init do_header (void) at ./init/initramfs.c:256>:" -> "S_ISREG()";
	"do_header() <int __init do_header (void) at ./init/initramfs.c:256>:" -> "read_into() <void __init read_into (char *buf, unsigned size, enum state next) at ./init/initramfs.c:220>:";
	"read_into() <void __init read_into (char *buf, unsigned size, enum state next) at ./init/initramfs.c:220>:" -> "eat() <inline void __init eat (unsigned n) at ./init/initramfs.c:209>:";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "strcmp()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "free_hash() <void __init free_hash (void) at ./init/initramfs.c:105>:";
	"free_hash() <void __init free_hash (void) at ./init/initramfs.c:105>:" -> "kfree()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "clean_path() <void __init clean_path (char *path, umode_t fmode) at ./init/initramfs.c:307>:";
	"clean_path() <void __init clean_path (char *path, umode_t fmode) at ./init/initramfs.c:307>:" -> "init_stat()";
	"clean_path() <void __init clean_path (char *path, umode_t fmode) at ./init/initramfs.c:307>:" -> "S_ISDIR()";
	"clean_path() <void __init clean_path (char *path, umode_t fmode) at ./init/initramfs.c:307>:" -> "init_rmdir()";
	"clean_path() <void __init clean_path (char *path, umode_t fmode) at ./init/initramfs.c:307>:" -> "init_unlink()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "S_ISREG()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "maybe_link() <int __init maybe_link (void) at ./init/initramfs.c:320>:";
	"maybe_link() <int __init maybe_link (void) at ./init/initramfs.c:320>:" -> "find_link() <char __init *find_link (int major, int minor, int ino, umode_t mode, char *name) at ./init/initramfs.c:77>:";
	"find_link() <char __init *find_link (int major, int minor, int ino, umode_t mode, char *name) at ./init/initramfs.c:77>:" -> "hash() <inline int hash (int major, int minor, int ino) at ./init/initramfs.c:70>:";
	"find_link() <char __init *find_link (int major, int minor, int ino, umode_t mode, char *name) at ./init/initramfs.c:77>:" -> "kmalloc()";
	"find_link() <char __init *find_link (int major, int minor, int ino, umode_t mode, char *name) at ./init/initramfs.c:77>:" -> "panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "show_mem()";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "va_start()";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "panic()";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "va_end()";
	"find_link() <char __init *find_link (int major, int minor, int ino, umode_t mode, char *name) at ./init/initramfs.c:77>:" -> "strcpy()";
	"maybe_link() <int __init maybe_link (void) at ./init/initramfs.c:320>:" -> "clean_path() <void __init clean_path (char *path, umode_t fmode) at ./init/initramfs.c:307>:";
	"clean_path() <void __init clean_path (char *path, umode_t fmode) at ./init/initramfs.c:307>:" -> "init_stat()";
	"clean_path() <void __init clean_path (char *path, umode_t fmode) at ./init/initramfs.c:307>:" -> "S_ISDIR()";
	"clean_path() <void __init clean_path (char *path, umode_t fmode) at ./init/initramfs.c:307>:" -> "init_rmdir()";
	"clean_path() <void __init clean_path (char *path, umode_t fmode) at ./init/initramfs.c:307>:" -> "init_unlink()";
	"maybe_link() <int __init maybe_link (void) at ./init/initramfs.c:320>:" -> "init_link()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "filp_open()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "IS_ERR()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "vfs_fchown()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "vfs_fchmod()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "vfs_truncate()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "S_ISDIR()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "init_mkdir()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "init_chown()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "init_chmod()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "dir_add() <void __init dir_add (const char *name, time64_t mtime) at ./init/initramfs.c:135>:";
	"dir_add() <void __init dir_add (const char *name, time64_t mtime) at ./init/initramfs.c:135>:" -> "kmalloc()";
	"dir_add() <void __init dir_add (const char *name, time64_t mtime) at ./init/initramfs.c:135>:" -> "panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "show_mem()";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "va_start()";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "panic()";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "va_end()";
	"dir_add() <void __init dir_add (const char *name, time64_t mtime) at ./init/initramfs.c:135>:" -> "INIT_LIST_HEAD()";
	"dir_add() <void __init dir_add (const char *name, time64_t mtime) at ./init/initramfs.c:135>:" -> "kstrdup()";
	"dir_add() <void __init dir_add (const char *name, time64_t mtime) at ./init/initramfs.c:135>:" -> "list_add()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "S_ISBLK()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "S_ISCHR()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "S_ISFIFO()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "S_ISSOCK()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "init_mknod()";
	"do_name() <int __init do_name (void) at ./init/initramfs.c:335>:" -> "do_utime() <long __init do_utime (char *filename, time64_t mtime) at ./init/initramfs.c:117>:";
	"do_utime() <long __init do_utime (char *filename, time64_t mtime) at ./init/initramfs.c:117>:" -> "init_utimes()";
	"do_reset() <int __init do_reset (void) at ./init/initramfs.c:298>:" -> "eat() <inline void __init eat (unsigned n) at ./init/initramfs.c:209>:";
	"do_reset() <int __init do_reset (void) at ./init/initramfs.c:298>:" -> "error() <void __init error (char *x) at ./init/initramfs.c:43>:";
	"do_skip() <int __init do_skip (void) at ./init/initramfs.c:286>:" -> "eat() <inline void __init eat (unsigned n) at ./init/initramfs.c:209>:";
	"do_start() <int __init do_start (void) at ./init/initramfs.c:236>:" -> "read_into() <void __init read_into (char *buf, unsigned size, enum state next) at ./init/initramfs.c:220>:";
	"read_into() <void __init read_into (char *buf, unsigned size, enum state next) at ./init/initramfs.c:220>:" -> "eat() <inline void __init eat (unsigned n) at ./init/initramfs.c:209>:";
	"do_symlink() <int __init do_symlink (void) at ./init/initramfs.c:402>:" -> "N_ALIGN()";
	"do_symlink() <int __init do_symlink (void) at ./init/initramfs.c:402>:" -> "clean_path() <void __init clean_path (char *path, umode_t fmode) at ./init/initramfs.c:307>:";
	"clean_path() <void __init clean_path (char *path, umode_t fmode) at ./init/initramfs.c:307>:" -> "init_stat()";
	"clean_path() <void __init clean_path (char *path, umode_t fmode) at ./init/initramfs.c:307>:" -> "S_ISDIR()";
	"clean_path() <void __init clean_path (char *path, umode_t fmode) at ./init/initramfs.c:307>:" -> "init_rmdir()";
	"clean_path() <void __init clean_path (char *path, umode_t fmode) at ./init/initramfs.c:307>:" -> "init_unlink()";
	"do_symlink() <int __init do_symlink (void) at ./init/initramfs.c:402>:" -> "init_symlink()";
	"do_symlink() <int __init do_symlink (void) at ./init/initramfs.c:402>:" -> "init_chown()";
	"do_symlink() <int __init do_symlink (void) at ./init/initramfs.c:402>:" -> "do_utime() <long __init do_utime (char *filename, time64_t mtime) at ./init/initramfs.c:117>:";
	"do_utime() <long __init do_utime (char *filename, time64_t mtime) at ./init/initramfs.c:117>:" -> "init_utimes()";
	"populate_rootfs() <int __init populate_rootfs (void) at ./init/initramfs.c:661>:" -> "unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "decompress()";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "kmalloc()";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "N_ALIGN()";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "show_mem()";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "va_start()";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "panic()";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "va_end()";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "write_buffer() <long __init write_buffer (char *buf, unsigned long len) at ./init/initramfs.c:425>:";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "decompress_method()";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "pr_debug()";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "flush_buffer() <long __init flush_buffer (void *bufv, unsigned long len) at ./init/initramfs.c:435>:";
	"flush_buffer() <long __init flush_buffer (void *bufv, unsigned long len) at ./init/initramfs.c:435>:" -> "write_buffer() <long __init write_buffer (char *buf, unsigned long len) at ./init/initramfs.c:425>:";
	"flush_buffer() <long __init flush_buffer (void *bufv, unsigned long len) at ./init/initramfs.c:435>:" -> "error() <void __init error (char *x) at ./init/initramfs.c:43>:";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "error() <void __init error (char *x) at ./init/initramfs.c:43>:";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "snprintf()";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "dir_utime() <void __init dir_utime (void) at ./init/initramfs.c:146>:";
	"dir_utime() <void __init dir_utime (void) at ./init/initramfs.c:146>:" -> "list_for_each_entry_safe()";
	"dir_utime() <void __init dir_utime (void) at ./init/initramfs.c:146>:" -> "list_del()";
	"dir_utime() <void __init dir_utime (void) at ./init/initramfs.c:146>:" -> "do_utime() <long __init do_utime (char *filename, time64_t mtime) at ./init/initramfs.c:117>:";
	"do_utime() <long __init do_utime (char *filename, time64_t mtime) at ./init/initramfs.c:117>:" -> "init_utimes()";
	"dir_utime() <void __init dir_utime (void) at ./init/initramfs.c:146>:" -> "kfree()";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "kfree()";
	"populate_rootfs() <int __init populate_rootfs (void) at ./init/initramfs.c:661>:" -> "panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "show_mem()";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "va_start()";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "panic()";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "va_end()";
	"populate_rootfs() <int __init populate_rootfs (void) at ./init/initramfs.c:661>:" -> "IS_ENABLED()";
	"populate_rootfs() <int __init populate_rootfs (void) at ./init/initramfs.c:661>:" -> "printk()";
	"populate_rootfs() <int __init populate_rootfs (void) at ./init/initramfs.c:661>:" -> "populate_initrd_image() <void __init populate_initrd_image (char *err) at ./init/initramfs.c:638>:";
	"populate_initrd_image() <void __init populate_initrd_image (char *err) at ./init/initramfs.c:638>:" -> "unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "decompress()";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "kmalloc()";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "N_ALIGN()";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "show_mem()";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "va_start()";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "panic()";
	"panic_show_mem() <void panic_show_mem (const char *fmt, ...) at ./init/initramfs.c:49>:" -> "va_end()";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "write_buffer() <long __init write_buffer (char *buf, unsigned long len) at ./init/initramfs.c:425>:";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "decompress_method()";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "pr_debug()";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "flush_buffer() <long __init flush_buffer (void *bufv, unsigned long len) at ./init/initramfs.c:435>:";
	"flush_buffer() <long __init flush_buffer (void *bufv, unsigned long len) at ./init/initramfs.c:435>:" -> "write_buffer() <long __init write_buffer (char *buf, unsigned long len) at ./init/initramfs.c:425>:";
	"flush_buffer() <long __init flush_buffer (void *bufv, unsigned long len) at ./init/initramfs.c:435>:" -> "error() <void __init error (char *x) at ./init/initramfs.c:43>:";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "error() <void __init error (char *x) at ./init/initramfs.c:43>:";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "snprintf()";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "dir_utime() <void __init dir_utime (void) at ./init/initramfs.c:146>:";
	"dir_utime() <void __init dir_utime (void) at ./init/initramfs.c:146>:" -> "list_for_each_entry_safe()";
	"dir_utime() <void __init dir_utime (void) at ./init/initramfs.c:146>:" -> "list_del()";
	"dir_utime() <void __init dir_utime (void) at ./init/initramfs.c:146>:" -> "do_utime() <long __init do_utime (char *filename, time64_t mtime) at ./init/initramfs.c:117>:";
	"do_utime() <long __init do_utime (char *filename, time64_t mtime) at ./init/initramfs.c:117>:" -> "init_utimes()";
	"dir_utime() <void __init dir_utime (void) at ./init/initramfs.c:146>:" -> "kfree()";
	"unpack_to_rootfs() <char *__init unpack_to_rootfs (char *buf, unsigned long len) at ./init/initramfs.c:462>:" -> "kfree()";
	"populate_initrd_image() <void __init populate_initrd_image (char *err) at ./init/initramfs.c:638>:" -> "printk()";
	"populate_initrd_image() <void __init populate_initrd_image (char *err) at ./init/initramfs.c:638>:" -> "filp_open()";
	"populate_initrd_image() <void __init populate_initrd_image (char *err) at ./init/initramfs.c:638>:" -> "IS_ERR()";
	"populate_initrd_image() <void __init populate_initrd_image (char *err) at ./init/initramfs.c:638>:" -> "xwrite() <ssize_t __init xwrite (struct file *file, const char *p, size_t count, loff_t *pos) at ./init/initramfs.c:18>:";
	"xwrite() <ssize_t __init xwrite (struct file *file, const char *p, size_t count, loff_t *pos) at ./init/initramfs.c:18>:" -> "kernel_write()";
	"populate_initrd_image() <void __init populate_initrd_image (char *err) at ./init/initramfs.c:638>:" -> "pr_err()";
	"populate_initrd_image() <void __init populate_initrd_image (char *err) at ./init/initramfs.c:638>:" -> "fput()";
	"populate_rootfs() <int __init populate_rootfs (void) at ./init/initramfs.c:661>:" -> "kexec_free_initrd() <inline bool kexec_free_initrd (void) at ./init/initramfs.c:631>:";
	"kexec_free_initrd() <inline bool kexec_free_initrd (void) at ./init/initramfs.c:631>:" -> "memset()";
	"kexec_free_initrd() <inline bool kexec_free_initrd (void) at ./init/initramfs.c:631>:" -> "free_initrd_mem() <void __weak __init free_initrd_mem (unsigned long start, unsigned long end) at ./init/initramfs.c:594>:";
	"free_initrd_mem() <void __weak __init free_initrd_mem (unsigned long start, unsigned long end) at ./init/initramfs.c:594>:" -> "ALIGN_DOWN()";
	"free_initrd_mem() <void __weak __init free_initrd_mem (unsigned long start, unsigned long end) at ./init/initramfs.c:594>:" -> "ALIGN()";
	"free_initrd_mem() <void __weak __init free_initrd_mem (unsigned long start, unsigned long end) at ./init/initramfs.c:594>:" -> "memblock_free()";
	"free_initrd_mem() <void __weak __init free_initrd_mem (unsigned long start, unsigned long end) at ./init/initramfs.c:594>:" -> "free_reserved_area()";
	"populate_rootfs() <int __init populate_rootfs (void) at ./init/initramfs.c:661>:" -> "free_initrd_mem() <void __weak __init free_initrd_mem (unsigned long start, unsigned long end) at ./init/initramfs.c:594>:";
	"free_initrd_mem() <void __weak __init free_initrd_mem (unsigned long start, unsigned long end) at ./init/initramfs.c:594>:" -> "ALIGN_DOWN()";
	"free_initrd_mem() <void __weak __init free_initrd_mem (unsigned long start, unsigned long end) at ./init/initramfs.c:594>:" -> "ALIGN()";
	"free_initrd_mem() <void __weak __init free_initrd_mem (unsigned long start, unsigned long end) at ./init/initramfs.c:594>:" -> "memblock_free()";
	"free_initrd_mem() <void __weak __init free_initrd_mem (unsigned long start, unsigned long end) at ./init/initramfs.c:594>:" -> "free_reserved_area()";
	"populate_rootfs() <int __init populate_rootfs (void) at ./init/initramfs.c:661>:" -> "flush_delayed_fput()";
	"reserve_initrd_mem() <void __init reserve_initrd_mem (void) at ./init/initramfs.c:549>:" -> "round_down()";
	"reserve_initrd_mem() <void __init reserve_initrd_mem (void) at ./init/initramfs.c:549>:" -> "round_up()";
	"reserve_initrd_mem() <void __init reserve_initrd_mem (void) at ./init/initramfs.c:549>:" -> "memblock_is_region_memory()";
	"reserve_initrd_mem() <void __init reserve_initrd_mem (void) at ./init/initramfs.c:549>:" -> "pr_err()";
	"reserve_initrd_mem() <void __init reserve_initrd_mem (void) at ./init/initramfs.c:549>:" -> "memblock_is_region_reserved()";
	"reserve_initrd_mem() <void __init reserve_initrd_mem (void) at ./init/initramfs.c:549>:" -> "memblock_reserve()";
	"reserve_initrd_mem() <void __init reserve_initrd_mem (void) at ./init/initramfs.c:549>:" -> "pr_cont()";
	"default_rootfs() <int __init default_rootfs (void) at ./init/noinitramfs.c:17>:" -> "init_mkdir()";
	"default_rootfs() <int __init default_rootfs (void) at ./init/noinitramfs.c:17>:" -> "init_mknod()";
	"default_rootfs() <int __init default_rootfs (void) at ./init/noinitramfs.c:17>:" -> "new_encode_dev()";
	"default_rootfs() <int __init default_rootfs (void) at ./init/noinitramfs.c:17>:" -> "MKDEV()";
	"default_rootfs() <int __init default_rootfs (void) at ./init/noinitramfs.c:17>:" -> "printk()";
	"prompt_ramdisk() <int __init prompt_ramdisk (char *str) at ./init/do_mounts_rd.c:20>:" -> "pr_warn()";
	"ramdisk_start_setup() <int __init ramdisk_start_setup (char *str) at ./init/do_mounts_rd.c:29>:" -> "simple_strtol()";
	"rd_load_disk() <int __init rd_load_disk (int n) at ./init/do_mounts_rd.c:279>:" -> "create_dev()";
	"rd_load_disk() <int __init rd_load_disk (int n) at ./init/do_mounts_rd.c:279>:" -> "MKDEV()";
	"rd_load_disk() <int __init rd_load_disk (int n) at ./init/do_mounts_rd.c:279>:" -> "rd_load_image() <int __init rd_load_image (char *from) at ./init/do_mounts_rd.c:186>:";
	"rd_load_image() <int __init rd_load_image (char *from) at ./init/do_mounts_rd.c:186>:" -> "filp_open()";
	"rd_load_image() <int __init rd_load_image (char *from) at ./init/do_mounts_rd.c:186>:" -> "IS_ERR()";
	"rd_load_image() <int __init rd_load_image (char *from) at ./init/do_mounts_rd.c:186>:" -> "identify_ramdisk_image() <int __init identify_ramdisk_image (struct file *file, loff_t pos, decompress_fn *decompressor) at ./init/do_mounts_rd.c:58>:";
	"identify_ramdisk_image() <int __init identify_ramdisk_image (struct file *file, loff_t pos, decompress_fn *decompressor) at ./init/do_mounts_rd.c:58>:" -> "kmalloc()";
	"identify_ramdisk_image() <int __init identify_ramdisk_image (struct file *file, loff_t pos, decompress_fn *decompressor) at ./init/do_mounts_rd.c:58>:" -> "memset()";
	"identify_ramdisk_image() <int __init identify_ramdisk_image (struct file *file, loff_t pos, decompress_fn *decompressor) at ./init/do_mounts_rd.c:58>:" -> "kernel_read()";
	"identify_ramdisk_image() <int __init identify_ramdisk_image (struct file *file, loff_t pos, decompress_fn *decompressor) at ./init/do_mounts_rd.c:58>:" -> "decompress_method()";
	"identify_ramdisk_image() <int __init identify_ramdisk_image (struct file *file, loff_t pos, decompress_fn *decompressor) at ./init/do_mounts_rd.c:58>:" -> "printk()";
	"identify_ramdisk_image() <int __init identify_ramdisk_image (struct file *file, loff_t pos, decompress_fn *decompressor) at ./init/do_mounts_rd.c:58>:" -> "ntohl()";
	"identify_ramdisk_image() <int __init identify_ramdisk_image (struct file *file, loff_t pos, decompress_fn *decompressor) at ./init/do_mounts_rd.c:58>:" -> "le32_to_cpu()";
	"identify_ramdisk_image() <int __init identify_ramdisk_image (struct file *file, loff_t pos, decompress_fn *decompressor) at ./init/do_mounts_rd.c:58>:" -> "le64_to_cpu()";
	"identify_ramdisk_image() <int __init identify_ramdisk_image (struct file *file, loff_t pos, decompress_fn *decompressor) at ./init/do_mounts_rd.c:58>:" -> "ext2_image_size()";
	"identify_ramdisk_image() <int __init identify_ramdisk_image (struct file *file, loff_t pos, decompress_fn *decompressor) at ./init/do_mounts_rd.c:58>:" -> "kfree()";
	"rd_load_image() <int __init rd_load_image (char *from) at ./init/do_mounts_rd.c:186>:" -> "crd_load() <int __init crd_load (decompress_fn deco) at ./init/do_mounts_rd.c:320>:";
	"crd_load() <int __init crd_load (decompress_fn deco) at ./init/do_mounts_rd.c:320>:" -> "pr_emerg()";
	"crd_load() <int __init crd_load (decompress_fn deco) at ./init/do_mounts_rd.c:320>:" -> "panic()";
	"crd_load() <int __init crd_load (decompress_fn deco) at ./init/do_mounts_rd.c:320>:" -> "compr_fill() <long __init compr_fill (void *buf, unsigned long len) at ./init/do_mounts_rd.c:289>:";
	"compr_fill() <long __init compr_fill (void *buf, unsigned long len) at ./init/do_mounts_rd.c:289>:" -> "kernel_read()";
	"compr_fill() <long __init compr_fill (void *buf, unsigned long len) at ./init/do_mounts_rd.c:289>:" -> "printk()";
	"crd_load() <int __init crd_load (decompress_fn deco) at ./init/do_mounts_rd.c:320>:" -> "compr_flush() <long __init compr_flush (void *window, unsigned long outcnt) at ./init/do_mounts_rd.c:299>:";
	"compr_flush() <long __init compr_flush (void *window, unsigned long outcnt) at ./init/do_mounts_rd.c:299>:" -> "kernel_write()";
	"compr_flush() <long __init compr_flush (void *window, unsigned long outcnt) at ./init/do_mounts_rd.c:299>:" -> "printk()";
	"crd_load() <int __init crd_load (decompress_fn deco) at ./init/do_mounts_rd.c:320>:" -> "error() <void __init error (char *x) at ./init/do_mounts_rd.c:313>:";
	"error() <void __init error (char *x) at ./init/do_mounts_rd.c:313>:" -> "printk()";
	"rd_load_image() <int __init rd_load_image (char *from) at ./init/do_mounts_rd.c:186>:" -> "nr_blocks() <unsigned long nr_blocks (struct file *file) at ./init/do_mounts_rd.c:177>:";
	"nr_blocks() <unsigned long nr_blocks (struct file *file) at ./init/do_mounts_rd.c:177>:" -> "S_ISBLK()";
	"nr_blocks() <unsigned long nr_blocks (struct file *file) at ./init/do_mounts_rd.c:177>:" -> "i_size_read()";
	"rd_load_image() <int __init rd_load_image (char *from) at ./init/do_mounts_rd.c:186>:" -> "printk()";
	"rd_load_image() <int __init rd_load_image (char *from) at ./init/do_mounts_rd.c:186>:" -> "strcmp()";
	"rd_load_image() <int __init rd_load_image (char *from) at ./init/do_mounts_rd.c:186>:" -> "kmalloc()";
	"rd_load_image() <int __init rd_load_image (char *from) at ./init/do_mounts_rd.c:186>:" -> "pr_cont()";
	"rd_load_image() <int __init rd_load_image (char *from) at ./init/do_mounts_rd.c:186>:" -> "fput()";
	"rd_load_image() <int __init rd_load_image (char *from) at ./init/do_mounts_rd.c:186>:" -> "kernel_read()";
	"rd_load_image() <int __init rd_load_image (char *from) at ./init/do_mounts_rd.c:186>:" -> "kernel_write()";
	"rd_load_image() <int __init rd_load_image (char *from) at ./init/do_mounts_rd.c:186>:" -> "kfree()";
	"rd_load_image() <int __init rd_load_image (char *from) at ./init/do_mounts_rd.c:186>:" -> "init_unlink()";
	"initcall_blacklist() <int __init initcall_blacklist (char *str) at ./init/main.c:1150>:" -> "strsep()";
	"initcall_blacklist() <int __init initcall_blacklist (char *str) at ./init/main.c:1150>:" -> "pr_debug()";
	"initcall_blacklist() <int __init initcall_blacklist (char *str) at ./init/main.c:1150>:" -> "memblock_alloc()";
	"initcall_blacklist() <int __init initcall_blacklist (char *str) at ./init/main.c:1150>:" -> "panic()";
	"initcall_blacklist() <int __init initcall_blacklist (char *str) at ./init/main.c:1150>:" -> "strlen()";
	"initcall_blacklist() <int __init initcall_blacklist (char *str) at ./init/main.c:1150>:" -> "strcpy()";
	"initcall_blacklist() <int __init initcall_blacklist (char *str) at ./init/main.c:1150>:" -> "list_add()";
	"initcall_blacklist() <int __init initcall_blacklist (char *str) at ./init/main.c:1150>:" -> "pr_warn()";
	"loglevel() <int __init loglevel (char *str) at ./init/main.c:247>:" -> "get_option()";
	"set_debug_rodata() <int __init set_debug_rodata (char *str) at ./init/main.c:1380>:" -> "strtobool()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "set_task_stack_end_magic()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "smp_setup_processor_id() <void __init __weak smp_setup_processor_id (void) at ./init/main.c:766>";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "debug_objects_early_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "cgroup_init_early()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "local_irq_disable()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "boot_cpu_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "page_address_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "pr_notice()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "early_security_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "setup_arch()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "setup_boot_config() <void __init setup_boot_config (const char *cmdline) at ./init/main.c:475>:";
	"setup_boot_config() <void __init setup_boot_config (const char *cmdline) at ./init/main.c:475>:" -> "get_boot_config_from_initrd() <void *__init get_boot_config_from_initrd (u32 *_size, u32 *_csum) at ./init/main.c:311>:";
	"get_boot_config_from_initrd() <void *__init get_boot_config_from_initrd (u32 *_size, u32 *_csum) at ./init/main.c:311>:" -> "memcmp()";
	"get_boot_config_from_initrd() <void *__init get_boot_config_from_initrd (u32 *_size, u32 *_csum) at ./init/main.c:311>:" -> "le32_to_cpu()";
	"get_boot_config_from_initrd() <void *__init get_boot_config_from_initrd (u32 *_size, u32 *_csum) at ./init/main.c:311>:" -> "pr_err()";
	"setup_boot_config() <void __init setup_boot_config (const char *cmdline) at ./init/main.c:475>:" -> "strlcpy()";
	"setup_boot_config() <void __init setup_boot_config (const char *cmdline) at ./init/main.c:475>:" -> "parse_args()";
	"setup_boot_config() <void __init setup_boot_config (const char *cmdline) at ./init/main.c:475>:" -> "bootconfig_params() <int __init bootconfig_params (char *param, char *val, const char *unused, void *arg) at ./init/main.c:399>:";
	"bootconfig_params() <int __init bootconfig_params (char *param, char *val, const char *unused, void *arg) at ./init/main.c:399>:" -> "strcmp()";
	"setup_boot_config() <void __init setup_boot_config (const char *cmdline) at ./init/main.c:475>:" -> "IS_ERR()";
	"setup_boot_config() <void __init setup_boot_config (const char *cmdline) at ./init/main.c:475>:" -> "pr_err()";
	"setup_boot_config() <void __init setup_boot_config (const char *cmdline) at ./init/main.c:475>:" -> "boot_config_checksum() <u32 boot_config_checksum (unsigned char *p, u32 size) at ./init/main.c:389>:";
	"setup_boot_config() <void __init setup_boot_config (const char *cmdline) at ./init/main.c:475>:" -> "memblock_alloc()";
	"setup_boot_config() <void __init setup_boot_config (const char *cmdline) at ./init/main.c:475>:" -> "memcpy()";
	"setup_boot_config() <void __init setup_boot_config (const char *cmdline) at ./init/main.c:475>:" -> "xbc_init()";
	"setup_boot_config() <void __init setup_boot_config (const char *cmdline) at ./init/main.c:475>:" -> "pr_info()";
	"setup_boot_config() <void __init setup_boot_config (const char *cmdline) at ./init/main.c:475>:" -> "xbc_make_cmdline() <char *__init xbc_make_cmdline (const char *key) at ./init/main.c:359>:";
	"xbc_make_cmdline() <char *__init xbc_make_cmdline (const char *key) at ./init/main.c:359>:" -> "xbc_find_node()";
	"xbc_make_cmdline() <char *__init xbc_make_cmdline (const char *key) at ./init/main.c:359>:" -> "xbc_snprint_cmdline() <int __init xbc_snprint_cmdline (char *buf, size_t size, struct xbc_node *root) at ./init/main.c:323>:";
	"xbc_snprint_cmdline() <int __init xbc_snprint_cmdline (char *buf, size_t size, struct xbc_node *root) at ./init/main.c:323>:" -> "xbc_node_for_each_key_value()";
	"xbc_snprint_cmdline() <int __init xbc_snprint_cmdline (char *buf, size_t size, struct xbc_node *root) at ./init/main.c:323>:" -> "xbc_node_compose_key_after()";
	"xbc_snprint_cmdline() <int __init xbc_snprint_cmdline (char *buf, size_t size, struct xbc_node *root) at ./init/main.c:323>:" -> "xbc_node_get_child()";
	"xbc_snprint_cmdline() <int __init xbc_snprint_cmdline (char *buf, size_t size, struct xbc_node *root) at ./init/main.c:323>:" -> "snprintf()";
	"xbc_snprint_cmdline() <int __init xbc_snprint_cmdline (char *buf, size_t size, struct xbc_node *root) at ./init/main.c:323>:" -> "rest()";
	"xbc_snprint_cmdline() <int __init xbc_snprint_cmdline (char *buf, size_t size, struct xbc_node *root) at ./init/main.c:323>:" -> "xbc_array_for_each_value()";
	"xbc_make_cmdline() <char *__init xbc_make_cmdline (const char *key) at ./init/main.c:359>:" -> "memblock_alloc()";
	"xbc_make_cmdline() <char *__init xbc_make_cmdline (const char *key) at ./init/main.c:359>:" -> "pr_err()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "setup_command_line() <void __init setup_command_line (char *command_line) at ./init/main.c:616>:";
	"setup_command_line() <void __init setup_command_line (char *command_line) at ./init/main.c:616>:" -> "strlen()";
	"setup_command_line() <void __init setup_command_line (char *command_line) at ./init/main.c:616>:" -> "memblock_alloc()";
	"setup_command_line() <void __init setup_command_line (char *command_line) at ./init/main.c:616>:" -> "panic()";
	"setup_command_line() <void __init setup_command_line (char *command_line) at ./init/main.c:616>:" -> "strcpy()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "setup_nr_cpu_ids() <inline void setup_nr_cpu_ids (void) at ./init/main.c:606>";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "setup_per_cpu_areas()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "smp_prepare_boot_cpu()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "boot_cpu_hotplug_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "build_all_zonelists()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "page_alloc_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "jump_label_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "parse_early_param() <void __init parse_early_param (void) at ./init/main.c:750>:";
	"parse_early_param() <void __init parse_early_param (void) at ./init/main.c:750>:" -> "strlcpy()";
	"parse_early_param() <void __init parse_early_param (void) at ./init/main.c:750>:" -> "parse_early_options() <void __init parse_early_options (char *cmdline) at ./init/main.c:743>:";
	"parse_early_options() <void __init parse_early_options (char *cmdline) at ./init/main.c:743>:" -> "parse_args()";
	"parse_early_options() <void __init parse_early_options (char *cmdline) at ./init/main.c:743>:" -> "do_early_param() <int __init do_early_param (char *param, char *val, const char *unused, void *arg) at ./init/main.c:725>:";
	"do_early_param() <int __init do_early_param (char *param, char *val, const char *unused, void *arg) at ./init/main.c:725>:" -> "parameq()";
	"do_early_param() <int __init do_early_param (char *param, char *val, const char *unused, void *arg) at ./init/main.c:725>:" -> "strcmp()";
	"do_early_param() <int __init do_early_param (char *param, char *val, const char *unused, void *arg) at ./init/main.c:725>:" -> "pr_warn()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "parse_args()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "unknown_bootoption() <int __init unknown_bootoption (char *param, char *val, const char *unused, void *arg) at ./init/main.c:531>:";
	"unknown_bootoption() <int __init unknown_bootoption (char *param, char *val, const char *unused, void *arg) at ./init/main.c:531>:" -> "strlen()";
	"unknown_bootoption() <int __init unknown_bootoption (char *param, char *val, const char *unused, void *arg) at ./init/main.c:531>:" -> "repair_env_string() <void __init repair_env_string (char *param, char *val) at ./init/main.c:491>:";
	"repair_env_string() <void __init repair_env_string (char *param, char *val) at ./init/main.c:491>:" -> "strlen()";
	"repair_env_string() <void __init repair_env_string (char *param, char *val) at ./init/main.c:491>:" -> "memmove()";
	"repair_env_string() <void __init repair_env_string (char *param, char *val) at ./init/main.c:491>:" -> "BUG()";
	"unknown_bootoption() <int __init unknown_bootoption (char *param, char *val, const char *unused, void *arg) at ./init/main.c:531>:" -> "obsolete_checksetup() <bool __init obsolete_checksetup (char *line) at ./init/main.c:196>:";
	"obsolete_checksetup() <bool __init obsolete_checksetup (char *line) at ./init/main.c:196>:" -> "strlen()";
	"obsolete_checksetup() <bool __init obsolete_checksetup (char *line) at ./init/main.c:196>:" -> "parameqn()";
	"obsolete_checksetup() <bool __init obsolete_checksetup (char *line) at ./init/main.c:196>:" -> "pr_warn()";
	"unknown_bootoption() <int __init unknown_bootoption (char *param, char *val, const char *unused, void *arg) at ./init/main.c:531>:" -> "strnchr()";
	"unknown_bootoption() <int __init unknown_bootoption (char *param, char *val, const char *unused, void *arg) at ./init/main.c:531>:" -> "strncmp()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "IS_ERR_OR_NULL()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "set_init_arg() <int __init set_init_arg (char *param, char *val, const char *unused, void *arg) at ./init/main.c:506>:";
	"set_init_arg() <int __init set_init_arg (char *param, char *val, const char *unused, void *arg) at ./init/main.c:506>:" -> "repair_env_string() <void __init repair_env_string (char *param, char *val) at ./init/main.c:491>:";
	"repair_env_string() <void __init repair_env_string (char *param, char *val) at ./init/main.c:491>:" -> "strlen()";
	"repair_env_string() <void __init repair_env_string (char *param, char *val) at ./init/main.c:491>:" -> "memmove()";
	"repair_env_string() <void __init repair_env_string (char *param, char *val) at ./init/main.c:491>:" -> "BUG()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "setup_log_buf()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "vfs_caches_init_early()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "sort_main_extable()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "trap_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "mm_init() <void __init mm_init (void) at ./init/main.c:821>:";
	"mm_init() <void __init mm_init (void) at ./init/main.c:821>:" -> "page_ext_init_flatmem()";
	"mm_init() <void __init mm_init (void) at ./init/main.c:821>:" -> "init_mem_debugging_and_hardening()";
	"mm_init() <void __init mm_init (void) at ./init/main.c:821>:" -> "kfence_alloc_pool()";
	"mm_init() <void __init mm_init (void) at ./init/main.c:821>:" -> "report_meminit() <void __init report_meminit (void) at ./init/main.c:794>:";
	"report_meminit() <void __init report_meminit (void) at ./init/main.c:794>:" -> "IS_ENABLED()";
	"report_meminit() <void __init report_meminit (void) at ./init/main.c:794>:" -> "pr_info()";
	"report_meminit() <void __init report_meminit (void) at ./init/main.c:794>:" -> "want_init_on_alloc()";
	"report_meminit() <void __init report_meminit (void) at ./init/main.c:794>:" -> "want_init_on_free()";
	"mm_init() <void __init mm_init (void) at ./init/main.c:821>:" -> "stack_depot_init()";
	"mm_init() <void __init mm_init (void) at ./init/main.c:821>:" -> "mem_init()";
	"mm_init() <void __init mm_init (void) at ./init/main.c:821>:" -> "page_ext_init_flatmem_late()";
	"mm_init() <void __init mm_init (void) at ./init/main.c:821>:" -> "kmem_cache_init()";
	"mm_init() <void __init mm_init (void) at ./init/main.c:821>:" -> "kmemleak_init()";
	"mm_init() <void __init mm_init (void) at ./init/main.c:821>:" -> "pgtable_init()";
	"mm_init() <void __init mm_init (void) at ./init/main.c:821>:" -> "debug_objects_mem_init()";
	"mm_init() <void __init mm_init (void) at ./init/main.c:821>:" -> "vmalloc_init()";
	"mm_init() <void __init mm_init (void) at ./init/main.c:821>:" -> "ioremap_huge_init()";
	"mm_init() <void __init mm_init (void) at ./init/main.c:821>:" -> "init_espfix_bsp()";
	"mm_init() <void __init mm_init (void) at ./init/main.c:821>:" -> "pti_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "ftrace_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "early_trace_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "sched_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "preempt_disable()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "WARN()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "irqs_disabled()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "radix_tree_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "housekeeping_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "workqueue_init_early()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "rcu_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "trace_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "initcall_debug_enable() <void __init initcall_debug_enable (void) at ./init/main.c:1189>:";
	"initcall_debug_enable() <void __init initcall_debug_enable (void) at ./init/main.c:1189>:" -> "register_trace_initcall_start()";
	"initcall_debug_enable() <void __init initcall_debug_enable (void) at ./init/main.c:1189>:" -> "trace_initcall_start_cb() <__init_or_module void trace_initcall_start_cb (void *data, initcall_t fn) at ./init/main.c:1164>:";
	"trace_initcall_start_cb() <__init_or_module void trace_initcall_start_cb (void *data, initcall_t fn) at ./init/main.c:1164>:" -> "printk()";
	"trace_initcall_start_cb() <__init_or_module void trace_initcall_start_cb (void *data, initcall_t fn) at ./init/main.c:1164>:" -> "task_pid_nr()";
	"trace_initcall_start_cb() <__init_or_module void trace_initcall_start_cb (void *data, initcall_t fn) at ./init/main.c:1164>:" -> "ktime_get()";
	"initcall_debug_enable() <void __init initcall_debug_enable (void) at ./init/main.c:1189>:" -> "register_trace_initcall_finish()";
	"initcall_debug_enable() <void __init initcall_debug_enable (void) at ./init/main.c:1189>:" -> "trace_initcall_finish_cb() <__init_or_module void trace_initcall_finish_cb (void *data, initcall_t fn, int ret) at ./init/main.c:1173>:";
	"trace_initcall_finish_cb() <__init_or_module void trace_initcall_finish_cb (void *data, initcall_t fn, int ret) at ./init/main.c:1173>:" -> "ktime_get()";
	"trace_initcall_finish_cb() <__init_or_module void trace_initcall_finish_cb (void *data, initcall_t fn, int ret) at ./init/main.c:1173>:" -> "ktime_sub()";
	"trace_initcall_finish_cb() <__init_or_module void trace_initcall_finish_cb (void *data, initcall_t fn, int ret) at ./init/main.c:1173>:" -> "ktime_to_ns()";
	"trace_initcall_finish_cb() <__init_or_module void trace_initcall_finish_cb (void *data, initcall_t fn, int ret) at ./init/main.c:1173>:" -> "printk()";
	"initcall_debug_enable() <void __init initcall_debug_enable (void) at ./init/main.c:1189>:" -> "WARN()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "context_tracking_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "early_irq_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "init_IRQ()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "tick_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "rcu_init_nohz()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "init_timers()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "hrtimers_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "softirq_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "timekeeping_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "kfence_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "rand_initialize()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "add_latent_entropy()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "add_device_randomness()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "strlen()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "boot_init_stack_canary()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "time_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "perf_event_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "profile_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "call_function_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "local_irq_enable()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "kmem_cache_init_late()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "console_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "panic()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "lockdep_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "locking_selftest()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "mem_encrypt_init() <void __init __weak mem_encrypt_init (void) at ./init/main.c:776>";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "page_to_pfn()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "virt_to_page()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "pr_crit()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "setup_per_cpu_pageset()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "numa_policy_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "acpi_early_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "late_time_init() <void (*__initdata late_time_init) (void) at ./init/main.c:138>";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "sched_clock_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "calibrate_delay()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "pid_idr_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "anon_vma_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "efi_enabled()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "efi_enter_virtual_mode()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "thread_stack_cache_init() <void __init __weak thread_stack_cache_init (void) at ./init/main.c:771>";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "cred_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "fork_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "proc_caches_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "uts_ns_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "key_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "security_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "dbg_late_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "vfs_caches_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "pagecache_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "signals_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "seq_file_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "proc_root_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "nsfs_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "cpuset_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "cgroup_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "taskstats_init_early()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "delayacct_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "poking_init() <void __init __weak poking_init (void) at ./init/main.c:778>";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "check_bugs()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "acpi_subsystem_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "arch_post_acpi_subsys_init() <void __init __weak arch_post_acpi_subsys_init (void) at ./init/main.c:764>";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "kcsan_init()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "arch_call_rest_init() <void __init __weak arch_call_rest_init (void) at ./init/main.c:847>:";
	"arch_call_rest_init() <void __init __weak arch_call_rest_init (void) at ./init/main.c:847>:" -> "rest_init() <noinline void __ref rest_init (void) at ./init/main.c:676>:";
	"rest_init() <noinline void __ref rest_init (void) at ./init/main.c:676>:" -> "rcu_scheduler_starting()";
	"rest_init() <noinline void __ref rest_init (void) at ./init/main.c:676>:" -> "kernel_thread()";
	"rest_init() <noinline void __ref rest_init (void) at ./init/main.c:676>:" -> "kernel_init() <int __ref kernel_init (void *unused) at ./init/main.c:1420>:";
	"kernel_init() <int __ref kernel_init (void *unused) at ./init/main.c:1420>:" -> "kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "wait_for_completion()";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "set_mems_allowed()";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "task_pid()";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "smp_prepare_cpus() <inline void smp_prepare_cpus (unsigned int maxcpus) at ./init/main.c:607>";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "workqueue_init()";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "init_mm_internals()";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "rcu_init_tasks_generic()";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "do_pre_smp_initcalls() <void __init do_pre_smp_initcalls (void) at ./init/main.c:1338>:";
	"do_pre_smp_initcalls() <void __init do_pre_smp_initcalls (void) at ./init/main.c:1338>:" -> "trace_initcall_level()";
	"do_pre_smp_initcalls() <void __init do_pre_smp_initcalls (void) at ./init/main.c:1338>:" -> "do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "preempt_count()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "initcall_blacklisted() <bool __init_or_module initcall_blacklisted (initcall_t fn) at ./init/main.c:1156>:";
	"initcall_blacklisted() <bool __init_or_module initcall_blacklisted (initcall_t fn) at ./init/main.c:1156>:" -> "list_empty()";
	"initcall_blacklisted() <bool __init_or_module initcall_blacklisted (initcall_t fn) at ./init/main.c:1156>:" -> "dereference_function_descriptor()";
	"initcall_blacklisted() <bool __init_or_module initcall_blacklisted (initcall_t fn) at ./init/main.c:1156>:" -> "sprint_symbol_no_offset()";
	"initcall_blacklisted() <bool __init_or_module initcall_blacklisted (initcall_t fn) at ./init/main.c:1156>:" -> "strreplace()";
	"initcall_blacklisted() <bool __init_or_module initcall_blacklisted (initcall_t fn) at ./init/main.c:1156>:" -> "list_for_each_entry()";
	"initcall_blacklisted() <bool __init_or_module initcall_blacklisted (initcall_t fn) at ./init/main.c:1156>:" -> "strcmp()";
	"initcall_blacklisted() <bool __init_or_module initcall_blacklisted (initcall_t fn) at ./init/main.c:1156>:" -> "pr_debug()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "do_trace_initcall_start() <inline void do_trace_initcall_start (initcall_t fn) at ./init/main.c:1202>:";
	"do_trace_initcall_start() <inline void do_trace_initcall_start (initcall_t fn) at ./init/main.c:1202>:" -> "trace_initcall_start_cb() <__init_or_module void trace_initcall_start_cb (void *data, initcall_t fn) at ./init/main.c:1164>:";
	"trace_initcall_start_cb() <__init_or_module void trace_initcall_start_cb (void *data, initcall_t fn) at ./init/main.c:1164>:" -> "printk()";
	"trace_initcall_start_cb() <__init_or_module void trace_initcall_start_cb (void *data, initcall_t fn) at ./init/main.c:1164>:" -> "task_pid_nr()";
	"trace_initcall_start_cb() <__init_or_module void trace_initcall_start_cb (void *data, initcall_t fn) at ./init/main.c:1164>:" -> "ktime_get()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "do_trace_initcall_finish() <inline void do_trace_initcall_finish (initcall_t fn, int ret) at ./init/main.c:1208>:";
	"do_trace_initcall_finish() <inline void do_trace_initcall_finish (initcall_t fn, int ret) at ./init/main.c:1208>:" -> "trace_initcall_finish_cb() <__init_or_module void trace_initcall_finish_cb (void *data, initcall_t fn, int ret) at ./init/main.c:1173>:";
	"trace_initcall_finish_cb() <__init_or_module void trace_initcall_finish_cb (void *data, initcall_t fn, int ret) at ./init/main.c:1173>:" -> "ktime_get()";
	"trace_initcall_finish_cb() <__init_or_module void trace_initcall_finish_cb (void *data, initcall_t fn, int ret) at ./init/main.c:1173>:" -> "ktime_sub()";
	"trace_initcall_finish_cb() <__init_or_module void trace_initcall_finish_cb (void *data, initcall_t fn, int ret) at ./init/main.c:1173>:" -> "ktime_to_ns()";
	"trace_initcall_finish_cb() <__init_or_module void trace_initcall_finish_cb (void *data, initcall_t fn, int ret) at ./init/main.c:1173>:" -> "printk()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "sprintf()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "preempt_count_set()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "irqs_disabled()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "strlcat()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "local_irq_enable()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "WARN()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "add_latent_entropy()";
	"do_pre_smp_initcalls() <void __init do_pre_smp_initcalls (void) at ./init/main.c:1338>:" -> "initcall_from_entry()";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "lockup_detector_init()";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "smp_init()";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "sched_init_smp()";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "padata_init()";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "page_alloc_init_late()";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "page_ext_init()";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "do_basic_setup() <void __init do_basic_setup (void) at ./init/main.c:1328>:";
	"do_basic_setup() <void __init do_basic_setup (void) at ./init/main.c:1328>:" -> "cpuset_init_smp()";
	"do_basic_setup() <void __init do_basic_setup (void) at ./init/main.c:1328>:" -> "driver_init()";
	"do_basic_setup() <void __init do_basic_setup (void) at ./init/main.c:1328>:" -> "init_irq_proc()";
	"do_basic_setup() <void __init do_basic_setup (void) at ./init/main.c:1328>:" -> "do_ctors() <void __init do_ctors (void) at ./init/main.c:1070>:";
	"do_basic_setup() <void __init do_basic_setup (void) at ./init/main.c:1328>:" -> "usermodehelper_enable()";
	"do_basic_setup() <void __init do_basic_setup (void) at ./init/main.c:1328>:" -> "do_initcalls() <void __init do_initcalls (void) at ./init/main.c:1302>:";
	"do_initcalls() <void __init do_initcalls (void) at ./init/main.c:1302>:" -> "strlen()";
	"do_initcalls() <void __init do_initcalls (void) at ./init/main.c:1302>:" -> "kzalloc()";
	"do_initcalls() <void __init do_initcalls (void) at ./init/main.c:1302>:" -> "panic()";
	"do_initcalls() <void __init do_initcalls (void) at ./init/main.c:1302>:" -> "ARRAY_SIZE()";
	"do_initcalls() <void __init do_initcalls (void) at ./init/main.c:1302>:" -> "strcpy()";
	"do_initcalls() <void __init do_initcalls (void) at ./init/main.c:1302>:" -> "do_initcall_level() <void __init do_initcall_level (int level, char *command_line) at ./init/main.c:1287>:";
	"do_initcall_level() <void __init do_initcall_level (int level, char *command_line) at ./init/main.c:1287>:" -> "parse_args()";
	"do_initcall_level() <void __init do_initcall_level (int level, char *command_line) at ./init/main.c:1287>:" -> "ignore_unknown_bootoption() <int __init ignore_unknown_bootoption (char *param, char *val, const char *unused, void *arg) at ./init/main.c:1281>";
	"do_initcall_level() <void __init do_initcall_level (int level, char *command_line) at ./init/main.c:1287>:" -> "trace_initcall_level()";
	"do_initcall_level() <void __init do_initcall_level (int level, char *command_line) at ./init/main.c:1287>:" -> "do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "preempt_count()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "initcall_blacklisted() <bool __init_or_module initcall_blacklisted (initcall_t fn) at ./init/main.c:1156>:";
	"initcall_blacklisted() <bool __init_or_module initcall_blacklisted (initcall_t fn) at ./init/main.c:1156>:" -> "list_empty()";
	"initcall_blacklisted() <bool __init_or_module initcall_blacklisted (initcall_t fn) at ./init/main.c:1156>:" -> "dereference_function_descriptor()";
	"initcall_blacklisted() <bool __init_or_module initcall_blacklisted (initcall_t fn) at ./init/main.c:1156>:" -> "sprint_symbol_no_offset()";
	"initcall_blacklisted() <bool __init_or_module initcall_blacklisted (initcall_t fn) at ./init/main.c:1156>:" -> "strreplace()";
	"initcall_blacklisted() <bool __init_or_module initcall_blacklisted (initcall_t fn) at ./init/main.c:1156>:" -> "list_for_each_entry()";
	"initcall_blacklisted() <bool __init_or_module initcall_blacklisted (initcall_t fn) at ./init/main.c:1156>:" -> "strcmp()";
	"initcall_blacklisted() <bool __init_or_module initcall_blacklisted (initcall_t fn) at ./init/main.c:1156>:" -> "pr_debug()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "do_trace_initcall_start() <inline void do_trace_initcall_start (initcall_t fn) at ./init/main.c:1202>:";
	"do_trace_initcall_start() <inline void do_trace_initcall_start (initcall_t fn) at ./init/main.c:1202>:" -> "trace_initcall_start_cb() <__init_or_module void trace_initcall_start_cb (void *data, initcall_t fn) at ./init/main.c:1164>:";
	"trace_initcall_start_cb() <__init_or_module void trace_initcall_start_cb (void *data, initcall_t fn) at ./init/main.c:1164>:" -> "printk()";
	"trace_initcall_start_cb() <__init_or_module void trace_initcall_start_cb (void *data, initcall_t fn) at ./init/main.c:1164>:" -> "task_pid_nr()";
	"trace_initcall_start_cb() <__init_or_module void trace_initcall_start_cb (void *data, initcall_t fn) at ./init/main.c:1164>:" -> "ktime_get()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "do_trace_initcall_finish() <inline void do_trace_initcall_finish (initcall_t fn, int ret) at ./init/main.c:1208>:";
	"do_trace_initcall_finish() <inline void do_trace_initcall_finish (initcall_t fn, int ret) at ./init/main.c:1208>:" -> "trace_initcall_finish_cb() <__init_or_module void trace_initcall_finish_cb (void *data, initcall_t fn, int ret) at ./init/main.c:1173>:";
	"trace_initcall_finish_cb() <__init_or_module void trace_initcall_finish_cb (void *data, initcall_t fn, int ret) at ./init/main.c:1173>:" -> "ktime_get()";
	"trace_initcall_finish_cb() <__init_or_module void trace_initcall_finish_cb (void *data, initcall_t fn, int ret) at ./init/main.c:1173>:" -> "ktime_sub()";
	"trace_initcall_finish_cb() <__init_or_module void trace_initcall_finish_cb (void *data, initcall_t fn, int ret) at ./init/main.c:1173>:" -> "ktime_to_ns()";
	"trace_initcall_finish_cb() <__init_or_module void trace_initcall_finish_cb (void *data, initcall_t fn, int ret) at ./init/main.c:1173>:" -> "printk()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "sprintf()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "preempt_count_set()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "irqs_disabled()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "strlcat()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "local_irq_enable()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "WARN()";
	"do_one_initcall() <int __init_or_module do_one_initcall (initcall_t fn) at ./init/main.c:1216>:" -> "add_latent_entropy()";
	"do_initcall_level() <void __init do_initcall_level (int level, char *command_line) at ./init/main.c:1287>:" -> "initcall_from_entry()";
	"do_initcalls() <void __init do_initcalls (void) at ./init/main.c:1302>:" -> "kfree()";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "kunit_run_all_tests()";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "console_on_rootfs() <void __init console_on_rootfs (void) at ./init/main.c:1488>:";
	"console_on_rootfs() <void __init console_on_rootfs (void) at ./init/main.c:1488>:" -> "filp_open()";
	"console_on_rootfs() <void __init console_on_rootfs (void) at ./init/main.c:1488>:" -> "IS_ERR()";
	"console_on_rootfs() <void __init console_on_rootfs (void) at ./init/main.c:1488>:" -> "pr_err()";
	"console_on_rootfs() <void __init console_on_rootfs (void) at ./init/main.c:1488>:" -> "init_dup()";
	"console_on_rootfs() <void __init console_on_rootfs (void) at ./init/main.c:1488>:" -> "fput()";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "init_eaccess()";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "prepare_namespace()";
	"kernel_init_freeable() <noinline void __init kernel_init_freeable (void) at ./init/main.c:1502>:" -> "integrity_load_keys()";
	"kernel_init() <int __ref kernel_init (void *unused) at ./init/main.c:1420>:" -> "async_synchronize_full()";
	"kernel_init() <int __ref kernel_init (void *unused) at ./init/main.c:1420>:" -> "kprobe_free_init_mem()";
	"kernel_init() <int __ref kernel_init (void *unused) at ./init/main.c:1420>:" -> "ftrace_free_init_mem()";
	"kernel_init() <int __ref kernel_init (void *unused) at ./init/main.c:1420>:" -> "kgdb_free_init_mem()";
	"kernel_init() <int __ref kernel_init (void *unused) at ./init/main.c:1420>:" -> "free_initmem() <void __weak free_initmem (void) at ./init/main.c:1415>:";
	"free_initmem() <void __weak free_initmem (void) at ./init/main.c:1415>:" -> "free_initmem_default()";
	"kernel_init() <int __ref kernel_init (void *unused) at ./init/main.c:1420>:" -> "mark_readonly() <inline void mark_readonly (void) at ./init/main.c:1409>:";
	"mark_readonly() <inline void mark_readonly (void) at ./init/main.c:1409>:" -> "rcu_barrier()";
	"mark_readonly() <inline void mark_readonly (void) at ./init/main.c:1409>:" -> "mark_rodata_ro()";
	"mark_readonly() <inline void mark_readonly (void) at ./init/main.c:1409>:" -> "rodata_test()";
	"mark_readonly() <inline void mark_readonly (void) at ./init/main.c:1409>:" -> "pr_info()";
	"mark_readonly() <inline void mark_readonly (void) at ./init/main.c:1409>:" -> "pr_warn()";
	"kernel_init() <int __ref kernel_init (void *unused) at ./init/main.c:1420>:" -> "pti_finalize()";
	"kernel_init() <int __ref kernel_init (void *unused) at ./init/main.c:1420>:" -> "numa_default_policy()";
	"kernel_init() <int __ref kernel_init (void *unused) at ./init/main.c:1420>:" -> "rcu_end_inkernel_boot()";
	"kernel_init() <int __ref kernel_init (void *unused) at ./init/main.c:1420>:" -> "do_sysctl_args()";
	"kernel_init() <int __ref kernel_init (void *unused) at ./init/main.c:1420>:" -> "run_init_process() <int run_init_process (const char *init_filename) at ./init/main.c:1347>:";
	"run_init_process() <int run_init_process (const char *init_filename) at ./init/main.c:1347>:" -> "pr_info()";
	"run_init_process() <int run_init_process (const char *init_filename) at ./init/main.c:1347>:" -> "pr_debug()";
	"run_init_process() <int run_init_process (const char *init_filename) at ./init/main.c:1347>:" -> "kernel_execve()";
	"kernel_init() <int __ref kernel_init (void *unused) at ./init/main.c:1420>:" -> "pr_err()";
	"kernel_init() <int __ref kernel_init (void *unused) at ./init/main.c:1420>:" -> "panic()";
	"kernel_init() <int __ref kernel_init (void *unused) at ./init/main.c:1420>:" -> "try_to_run_init_process() <int try_to_run_init_process (const char *init_filename) at ./init/main.c:1362>:";
	"try_to_run_init_process() <int try_to_run_init_process (const char *init_filename) at ./init/main.c:1362>:" -> "run_init_process() <int run_init_process (const char *init_filename) at ./init/main.c:1347>:";
	"run_init_process() <int run_init_process (const char *init_filename) at ./init/main.c:1347>:" -> "pr_info()";
	"run_init_process() <int run_init_process (const char *init_filename) at ./init/main.c:1347>:" -> "pr_debug()";
	"run_init_process() <int run_init_process (const char *init_filename) at ./init/main.c:1347>:" -> "kernel_execve()";
	"try_to_run_init_process() <int try_to_run_init_process (const char *init_filename) at ./init/main.c:1362>:" -> "pr_err()";
	"rest_init() <noinline void __ref rest_init (void) at ./init/main.c:676>:" -> "rcu_read_lock()";
	"rest_init() <noinline void __ref rest_init (void) at ./init/main.c:676>:" -> "find_task_by_pid_ns()";
	"rest_init() <noinline void __ref rest_init (void) at ./init/main.c:676>:" -> "set_cpus_allowed_ptr()";
	"rest_init() <noinline void __ref rest_init (void) at ./init/main.c:676>:" -> "cpumask_of()";
	"rest_init() <noinline void __ref rest_init (void) at ./init/main.c:676>:" -> "smp_processor_id()";
	"rest_init() <noinline void __ref rest_init (void) at ./init/main.c:676>:" -> "rcu_read_unlock()";
	"rest_init() <noinline void __ref rest_init (void) at ./init/main.c:676>:" -> "numa_default_policy()";
	"rest_init() <noinline void __ref rest_init (void) at ./init/main.c:676>:" -> "complete()";
	"rest_init() <noinline void __ref rest_init (void) at ./init/main.c:676>:" -> "schedule_preempt_disabled()";
	"rest_init() <noinline void __ref rest_init (void) at ./init/main.c:676>:" -> "cpu_startup_entry()";
	"start_kernel() <asmlinkage __visible void __init __no_sanitize_address start_kernel (void) at ./init/main.c:852>:" -> "prevent_tail_call_optimization()";
	"warn_bootconfig() <int __init warn_bootconfig (char *str) at ./init/main.c:481>:" -> "pr_warn()";
	"calibrate_delay() <void calibrate_delay (void) at ./init/calibrate.c:275>:" -> "smp_processor_id()";
	"calibrate_delay() <void calibrate_delay (void) at ./init/calibrate.c:275>:" -> "per_cpu()";
	"calibrate_delay() <void calibrate_delay (void) at ./init/calibrate.c:275>:" -> "pr_info()";
	"calibrate_delay() <void calibrate_delay (void) at ./init/calibrate.c:275>:" -> "calibrate_delay_is_known()";
	"calibrate_delay() <void calibrate_delay (void) at ./init/calibrate.c:275>:" -> "calibrate_delay_direct() <unsigned long calibrate_delay_direct (void) at ./init/calibrate.c:170>:";
	"calibrate_delay_direct() <unsigned long calibrate_delay_direct (void) at ./init/calibrate.c:170>:" -> "read_current_timer()";
	"calibrate_delay_direct() <unsigned long calibrate_delay_direct (void) at ./init/calibrate.c:170>:" -> "time_before_eq()";
	"calibrate_delay_direct() <unsigned long calibrate_delay_direct (void) at ./init/calibrate.c:170>:" -> "printk()";
	"calibrate_delay() <void calibrate_delay (void) at ./init/calibrate.c:275>:" -> "calibrate_delay_converge() <unsigned long calibrate_delay_converge (void) at ./init/calibrate.c:187>:";
	"calibrate_delay() <void calibrate_delay (void) at ./init/calibrate.c:275>:" -> "pr_cont()";
	"calibrate_delay() <void calibrate_delay (void) at ./init/calibrate.c:275>:" -> "calibration_delay_done()";
	"lpj_setup() <int __init lpj_setup (char *str) at ./init/calibrate.c:17>:" -> "simple_strtoul()";
}